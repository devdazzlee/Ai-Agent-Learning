# -*- coding: utf-8 -*-
"""Chatbot with Agents SDK.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WE4gxdjRZuRvvPX2LHH93hSWOjXvzzyK
"""

!pip install -Uq openai-agents

import nest_asyncio
nest_asyncio.apply()

"""Run Google Gemini with OpenAi-agent SDK"""

import os
from google.colab import userdata

gemini_api_key = userdata.get("GEMINI_API_KEY")
print(gemini_api_key)

from agents import Agent, Runner, AsyncOpenAI, OpenAIChatCompletionsModel
from agents.run import RunConfig


if not gemini_api_key:
  raise ValueError("Please set your GEMINI_API_KEY in .env")

external_client = AsyncOpenAI(
    api_key=gemini_api_key,
    base_url="https://generativelanguage.googleapis.com/v1beta/openai/"
)
model = OpenAIChatCompletionsModel(
    model="gemini-2.0-flash",
    openai_client=external_client
)

config= RunConfig(
    model=model,
    model_provider=external_client,
    tracing_disabled=True
)

"""## ***Hello *World* Code | method one***"""

from agents import Agent, Runner, AsyncOpenAI, OpenAIChatCompletionsModel
from agents.run import RunConfig

agent: Agent = Agent(name="Assistant", instructions="You are helpful assistant" , model=model)
result = Runner.run_sync(agent, "Who is the Founder of Pakistan??", run_config=config)

print('/nCALLING AGENT\n')
print(result.final_output)

import asyncio
from agents import Agent, Runner
from openai.types.responses import ResponseTextDeltaEvent

async def main():
  agent = Agent(
      name="Joker",
      instructions="You are helpful assistant",
      )
  result = Runner.run_streamed(agent, "Tell me DSA and Algorithms in Programming??", run_config=config)
import asyncio
from agents import Agent, Runner

async def main():
  agent = Agent(
      name="Joker",
      instructions="You are helpful assistant",
      )
  result = Runner.run_streamed(agent, "Tell me DSA and Algorithms in Programming??", run_config=config)
  print(result)
  async for event in result.stream_events():
      if event.type == "raw_response_event" and isinstance(event.data, ResponseTextDeltaEvent):
        print(event.data.delta, end="", flush=True)

asyncio.run(main())

"""# **Stream item code**"""

import asyncio
import random

from agents import Agent, ItemHelpers, Runner, function_tool


@function_tool
def how_many_jokes() -> int:
  return random.randint(1,10)


async def main():
  agent = Agent(
      name="Joker",
      instructions="First Call the `how_many_jokes` tool, then tell that many jokes.",
      tools=[how_many_jokes]
      )
  result = Runner.run_streamed(
      agent,
      input="Hello"
      )
  print(result)
  print("Rin Starting")
  async for event in result.stream_events():
      if event.type == "raw_response_event":
        continue
      elif event.type == "agent_updated_stream_event":
        print(f"Agent updated : {event.new_agent.name}")
      elif event.type == "run_item_stream_event":
        if event.item.type == "tool_call_item":
            print("--Tool was called")
        elif event.item.type == "tool_call_output_item":
            print(f"--tool_call_output_item {event.item.output}" )
        elif event.item.type == "messege_output_item":
            print(f"--messege_output_item {ItemHelpers.text_message_output(event.item)}" )
        else:
          pass
try:
  asyncio.run(main())
except:
  pass
print("=== Run Complete ===")