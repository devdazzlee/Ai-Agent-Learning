# -*- coding: utf-8 -*-
"""Augmented LLM | Memory | Processess - Manager Agent, Planner LLM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WtHkuSrm1Q61_CK1ZcoDg1b724tE23YM
"""

import os
from google.colab import userdata

os.environ['GEMINI_API_KEY'] = userdata.get('GEMINI_API_KEY')

!pip install -Uq crewai-tools

import nest_asyncio
nest_asyncio.apply()

from crewai.flow.flow import Flow, start, listen

class MyFlow(Flow):

  @start()
  def funtion1(self):
    print("Step 1")


  @listen(funtion1)
  def funtion2(self):
    print("Step 2")

flow = MyFlow()
flow.kickoff()

from crewai import LLM

llm1 = LLM(
    model="gemini/gemini-2.0-flash"
)
llm1.call("What is the meaning of life ??")

google_embedder={
        "provider": "google",
        "config": {
            "model": "models/text-embedding-004",
            "api_key": userdata.get('GEMINI_API_KEY'),
        }
    }



from crewai import Agent, Task, Crew, Process, LLM
from crewai.knowledge.source.string_knowledge_source import StringKnowledgeSource


# Create Knowledge Source
content = "Users name is Ahmed Raza. I live in karachi and i am future billionare. He is 19 Years old and live in Karachi, Pakistan..."
string_source = StringKnowledgeSource(
    content=content,
)
agent = Agent(
    role="About User",
    goal="You know everything about the user.",
    backstory="""You are a master at understanding people and their preferences.""",
    verbose=True,
    allow_delegation=False,
    llm=llm1,
    embedder={
        "provider": "google",
        "config": {
            "model": "models/text-embedding-004",
            "api_key": userdata.get('GEMINI_API_KEY'),
        }
    }
)

task = Task(
    description="Answer the following questions about the user: {question}",
    expected_output="An answer to the question.",
    agent=agent,
)

crew = Crew(
    agents=[agent],
    tasks=[task],
    verbose=True,
    process=Process.sequential,
    knowledge_sources=[string_source],
    embedder= google_embedder
)

result = crew.kickoff(inputs={"question": "What city does Ahmed live in and how old is he?"})

import os
os.environ['CREWAI_STORAGE_DIR'] = '/my_crew1'

from crewai import LLM

llm1 = LLM(
    model="gemini/gemini-2.0-flash"
)
llm1.call("What is the meaning of life ??")

from crewai import Crew, Process
from crewai.memory import LongTermMemory, ShortTermMemory, EntityMemory
from crewai.memory.storage.rag_storage import RAGStorage
from crewai.memory.storage.ltm_sqlite_storage import LTMSQLiteStorage

from typing import List, Optional

agent = Agent(
    role="About User",
    goal="You know everything about the user.",
    backstory="""You are a master at understanding people and their preferences.""",
    verbose=True,
    allow_delegation=False,
    llm=llm1,
    embedder=google_embedder,
)

task = Task(
    description="Answer the following questions about the user: {question}",
    expected_output="An answer to the question.",
    agent=agent,
)

# Assemble your crew with memory capabilities
crew = Crew(
    agents = [agent],
    tasks = [task],
    process = Process.sequential,
    memory = True,
    # Long-term memory for persistent storage across sessions
    long_term_memory = LongTermMemory(
        storage=LTMSQLiteStorage(
            db_path="/my_crew1/long_term_memory_storage.db"
        )
    ),
    # Short-term memory for current context using RAG
    short_term_memory = ShortTermMemory(
        storage = RAGStorage(
                embedder_config=google_embedder,
                type="short_term",
                path="/my_crew1/"
            )
        ),

     # Entity memory for tracking key information about entities
    entity_memory = EntityMemory(
        storage=RAGStorage(
            embedder_config=google_embedder,
            type="short_term",
            path="/my_crew1/"
        )
    ),
      verbose=True,
    ),

import os
from crewai import Crew, Process
from mem0 import MemoryClient

# Set environment variables for Mem0
os.environ["MEM0_API_KEY"] = userdata.get('MEM0_API_KEY')


# cient = MemoryClient()
# messages = [
#     {"role": "user", "content": "Hi there! I'm planning a vacation and could use some advice."},
#     {"role": "assistant", "content": "Hello! I'd be happy to help with your vacation planning. What kind of destination do you prefer?"},
#     {"role": "user", "content": "I'm more of a beach person than a mountain person."},
#     {"role": "assistant", "content": "That's interesting. Do you like hotels or Airbnb?"},
#     {"role": "user", "content": "I like Airbnb more."}
# ]
# cient.add(messages , user_id="Ahmed Raza")

agent = Agent(
    role="About User",
    goal="You know everything about the user.",
    backstory="""You are a master at understanding people and their preferences.""",
    verbose=True,
    allow_delegation=False,
    llm=llm1,
)
task = Task(
    description="Answer the following questions about the user: {question}",
    expected_output="An answer to the question.",
    agent=agent,
)

crew = Crew(
    agents = [agent],
    tasks = [task],
    process = Process.sequential,
    verbose=True,
    memory = True,
    memory_config={
        "provider": "mem0",
        "config": {"user_id" : "Ahmed Raza"}
    },
)

crew.kickoff(
    inputs={"question": "which destination is better for a beach vacation?"}
)

!pip install -Uq 'crewai[tools]'

os.environ['SERPER_API_KEY'] = userdata.get('SERPER_API_KEY')

import os
from crewai import Agent, Task, Crew
# Importing crewAI tools
from crewai_tools import (
    DirectoryReadTool,
    FileReadTool,
    SerperDevTool,
    WebsiteSearchTool
)

# Set up API keys
os.environ["SERPER_API_KEY"] = userdata.get('SERPER_API_KEY')
os.environ["GEMINI_API_KEY"] = userdata.get('GEMINI_API_KEY')

# Instantiate tools
docs_tool = DirectoryReadTool(directory='./blog-posts')
file_tool = FileReadTool()
search_tool = SerperDevTool()

# Create agents

writer = Agent(
    role='Content Writer',
    goal='Craft engaging blog posts about the AI industry',
    backstory='A skilled writer with a passion for technology.',
    tools=[docs_tool, file_tool],
    verbose=True
)

write = Task(
    description="""Write an engaging blog post about the AI industry, based on the research analyst's summary. Draw inspiration from the latest blog posts in the directory.""",
    expected_output='A 4-paragraph blog post formatted in markdown with engaging, informative, and accessible content, avoiding complex jargon.',
    agent=writer,
    output_file='blog-posts/new_post.md'  # The final blog post will be saved here
)

# Assemble a crew with planning enabled
crew = Crew(
    agents=[researcher, writer],
    tasks=[research, write],
    verbose=True,
    planning=True,  # Enable planning feature
)

# Execute tasks
crew.kickoff()

google_embedder={
        "provider": "google",
        "config": {
            "model": "models/text-embedding-004",
            "api_key": userdata.get('GEMINI_API_KEY'),
        }
    }

llm2 = LLM(model="gemini/gemini-2.0-flash")

import os
from crewai import Agent, Task, Crew
# Importing crewAI tools
from crewai_tools import (
    DirectoryReadTool,
    FileReadTool,
    SerperDevTool,
    WebsiteSearchTool
)

# Set up API keys
os.environ["SERPER_API_KEY"] = userdata.get('SERPER_API_KEY')

# Instantiate tools
docs_tool = DirectoryReadTool(directory='./blog-posts')
file_tool = FileReadTool()
search_tool = SerperDevTool()
web_rag_tool = WebsiteSearchTool()

# Create agents
researcher = Agent(
    role='Market Research Analyst',
    goal='Provide up-to-date market analysis of the AI industry',
    backstory='An expert analyst with a keen eye for market trends.',
    tools=[search_tool, web_rag_tool],
    verbose=True,
    llm=llm1
)

writer = Agent(
    role='Content Writer',
    goal='Craft engaging blog posts about the AI industry',
    backstory='A skilled writer with a passion for technology.',
    tools=[docs_tool, file_tool],
    verbose=True,
    llm=llm1
)

# Define tasks
research = Task(
    description='Research the latest trends in the AI industry and provide a summary.',
    expected_output='A summary of the top 3 trending developments in the AI industry with a unique perspective on their significance.',
    agent=researcher
)

write = Task(
    description="""'Write an engaging blog post about the AI industry, based on the research analyst's summary. Draw inspiration from the latest blog posts in the directory.' """,
    expected_output='A 4-paragraph blog post formatted in markdown with engaging, informative, and accessible content, avoiding complex jargon.',
    agent=writer,
    output_file='blog-posts/new_post.md'  # The final blog post will be saved here
)

# Assemble a crew with planning enabled
crew = Crew(
    agents=[researcher, writer],
    tasks=[research, write],
    verbose=True,
    planning=True,  # Enable planning feature
    planning_llm=llm2,
)

# Execute tasks
crew.kickoff()

"""## **Custom Tools**"""

from crewai.tools import BaseTool  # âœ… Correct import (not from crewai_tools)
from pydantic import BaseModel, Field
from typing import Type

class MyToolInput(BaseModel):
    student_name: str = Field(..., description="Name of the student")
    student_roll_no: int = Field(..., description="Student ID")

class PiaicStudentCard(BaseTool):  # âœ… Extending the correct BaseTool
    name: str = "Piaic student card"
    description: str = "This function will create a student card"
    args_schema: Type[BaseModel] = MyToolInput

    def _run(self, **kwargs) -> str:
        student_name = kwargs.get("student_name")
        student_roll_no = kwargs.get("student_roll_no")
        return f"""ðŸŽ“ PIAIC Student Card
        -----------------------
        ðŸ‘¤ Name: {student_name}
        ðŸ†” Roll No: {student_roll_no}
        """

from crewai.tools import tool
@tool("PIAIC fee update")
def my_tool(roll_no: int) -> dict | str:
  """ this function search piaic student fee updates, it will required roll no of PIAIC student"""

  data = {100 : 'paid',
        200: 'unpaid'}

  status = data.get(roll_no)

  if status:
    return {"status": status}
  else:
    return "student not found"

from crewai import Agent, Task, Crew

card = PiaicStudentCard()

piaic_manager = Agent(
    role="PIAIC manager",
    goal="Manage all queries about PIAIC",
    backstory="You are a master at understanding people and their preferences.",
    tools=[card, my_tool],
    verbose=True,
    llm=llm1,
)


piaic_card_creater = Task(
    description="You are responsible for all PIAIC relevant operations, student '{question}'",
    expected_output="Final query answer only",
    agent=piaic_manager,
)


crew = Crew(
    agents = [piaic_manager],
    tasks = [piaic_card_creater],
    verbose=True,
)

crew.kickoff(
    inputs={"question": "My name is Ahmed and my roll number is 100. Can you create my card?"}
)

result = crew.kickoff(
    inputs={"question": "My name is Ahmed my roll numbrt is 100  Can you show my fees updates ?"}
)
print(result)

"""# Process"""

